# yaml-language-server: $schema=https://raw.githubusercontent.com/argoproj/argo-workflows/v3.4.13/api/jsonschema/schema.json

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: imagery-standardising
  namespace: argo
  labels:
    linz.govt.nz/category: raster
    linz.govt.nz/data-type: raster
spec:
  parallelism: 50
  nodeSelector:
    karpenter.sh/capacity-type: 'spot'
  entrypoint: main
  synchronization:
    semaphore:
      configMapKeyRef:
        name: semaphores
        key: standardising
  workflowMetadata:
    labelsFrom:
      linz.govt.nz/ticket:
        expression: workflow.parameters.ticket
      linz.govt.nz/region:
        expression: workflow.parameters.region
  arguments:
    parameters:
      - name: version_argo_tasks
        value: 'v3'
      - name: version_basemaps_cli
        value: 'v6'
      - name: version_topo_imagery
        value: 'v4'
      - name: ticket
        description: Ticket ID e.g. 'AIP-55'
        value: ''
      - name: region
        description: Region of the dataset
        value: 'new-zealand'
        enum:
          - 'antarctica'
          - 'auckland'
          - 'bay-of-plenty'
          - 'canterbury'
          - 'gisborne'
          - 'global'
          - 'hawkes-bay'
          - 'manawatu-whanganui'
          - 'marlborough'
          - 'nelson'
          - 'new-zealand'
          - 'northland'
          - 'otago'
          - 'pacific-islands'
          - 'southland'
          - 'taranaki'
          - 'tasman'
          - 'waikato'
          - 'wellington'
          - 'west-coast'
      - name: source
        value: 's3://linz-imagery-staging/test/sample/'
      - name: include
        value: '.tiff?$'
      - name: scale
        value: '500'
        enum:
          - '500'
          - '1000'
          - '2000'
          - '5000'
          - '10000'
          - '50000'
          - 'None'
      - name: validate
        value: 'true'
        enum:
          - 'false'
          - 'true'
      - name: retile
        value: 'false'
        enum:
          - 'true'
          - 'false'
      - name: source_epsg
        value: '2193'
      - name: target_epsg
        value: '2193'
      - name: group
        value: '50'
      - name: compression
        value: 'webp'
        enum:
          - 'webp'
          - 'lzw'
          - 'dem_lerc'
      - name: cutline
        description: '(Optional) location of a cutline file to cut the imagery to .fgb or .geojson'
        value: ''
      - name: collection_id
        description: '(Optional) If an existing dataset add collection ID here, else a new one will be generated.'
        value: ''
      - name: category
        value: 'urban-aerial-photos'
        enum:
          - 'aerial-photos'
          - 'urban-aerial-photos'
          - 'rural-aerial-photos'
          - 'scanned-aerial-photos'
          - 'dem'
          - 'dsm'
          - 'satellite-imagery'
      - name: gsd
        description: 'Dataset GSD (e.g., "0.3m")'
      - name: producer
        value: 'Unknown'
        enum:
          [
            'Unknown',
            'AAM NZ',
            'Aerial Surveys',
            'Beca',
            'Chang Guang Satellite Technology',
            'Christchurch Helicopters',
            'Dimap',
            'European Space Agency',
            'GeoSmart',
            'Landpro',
            'Maxar',
            'NZ Aerial Mapping',
            'Ocean Infinity',
            'Recon',
            'RPS',
            'SKYCAN',
            'SKYVUW',
            'Terralink International',
            'UAV Mapping NZ',
            'University of Canterbury',
            'Woolpert',
          ]
      - name: producer_list
        description: '(Optional) List of imagery producers, separated by a semicolons (;). Has no effect unless a semicolon delimited list is entered.'
        value: ''
      - name: licensor
        value: 'Unknown'
        enum:
          [
            'Unknown',
            'Ashburton District Council',
            'Auckland Council',
            'BOPLASS',
            'Bay of Plenty Regional Council',
            'Buller District Council',
            'Canterbury Aerial Imagery Consortium (CAI)',
            'Carterton District Council',
            "Central Hawke's Bay District Council",
            'Central Otago District Council',
            'Chang Guang Satellite Technology',
            'Chatham Islands Council',
            'Christchurch City Council',
            'Clutha District Council',
            'CoLAB',
            'Department of Conservation',
            'Dunedin City Council',
            'Environment Canterbury',
            'Environment Southland',
            'Far North District Council',
            'Gisborne District Council',
            'Gore District Council',
            'Greater Wellington Regional Council',
            'Grey District Council',
            'Hamilton City Council',
            'Hastings District Council',
            'Hauraki District Council',
            "Hawke's Bay Local Authority Shared Services (HB LASS)",
            "Hawke's Bay Regional Council",
            'Horizons Regional Council',
            'Horowhenua District Council',
            'Hurunui District Council',
            'Hutt City Council',
            'Invercargill City Council',
            'Kaikōura District Council',
            'Kaipara District Council',
            'Kawerau District Council',
            'Kāpiti Coast District Council',
            'Mackenzie District Council',
            'Manawatū District Council',
            'Manawatū-Whanganui LASS',
            'Marlborough District Council',
            'Masterton District Council',
            'Matamata-Piako District Council',
            'Maxar Technologies',
            'Ministry of Business, Innovation and Employment',
            'Ministry of Primary Industries',
            'NZ Aerial Mapping',
            'Napier City Council',
            'National Emergency Management Agency',
            'National Institute of Water and Atmospheric Research',
            'Nelson City Council',
            'New Plymouth District Council',
            'Northland Regional Council',
            'Ōpōtiki District Council',
            'Ōtorohanga District Council',
            'Otago Regional Council',
            'Palmerston North City Council',
            'Planet',
            'Porirua City Council',
            'Queenstown-Lakes District Council',
            'Rangitīkei District Council',
            'Rotorua District Council',
            'Ruapehu District Council',
            'Selwyn District Council',
            'Sinergise',
            'South Taranaki District Council',
            'South Waikato District Council',
            'South Wairarapa District Council',
            'Southland District Council',
            'Stratford District Council',
            'Taranaki Regional Council',
            'Tararua District Council',
            'Tasman District Council',
            'Taupō District Council',
            'Tauranga City Council',
            'Terralink International',
            'Thames-Coromandel District Council',
            'Timaru District Council',
            'Toitū Te Whenua Land Information New Zealand',
            'Upper Hutt City Council',
            'Waikato District Council',
            'Waikato Regional Aerial Photography Service (WRAPS)',
            'Waikato Regional Council',
            'Waimakariri District Council',
            'Waimate District Council',
            'Waipā District Council',
            'Wairoa District Council',
            'Waitaki District Council',
            'Waitomo District Council',
            'Waka Kotahi',
            'Wellington City Council',
            'West Coast Regional Council',
            'Western Bay of Plenty District Council',
            'Westland District Council',
            'Whakatāne District Council',
            'Whanganui District Council',
            'Whangārei District Council',
          ]
      - name: licensor_list
        description: '(Optional) List of imagery licensors, separated by a semicolons (;). Has no effect unless a semicolon delimited list is entered.'
        value: ''
      - name: start_datetime
        value: 'YYYY-MM-DD'
      - name: end_datetime
        value: 'YYYY-MM-DD'
      - name: geographic_description
        description: '(Optional) Additional datatset description, to be used in the title in place of the Region (e.g., "Hamilton")'
        value: ''
      - name: lifecycle
        value: 'completed'
        enum:
          - 'under development'
          - 'preview'
          - 'ongoing'
          - 'completed'
          - 'deprecated'
      - name: event
        description: '(Optional) Event name if dataset has been captured in association with an event (e.g., "Top of the South Floods")'
        value: ''
      - name: historic_survey_number
        description: '(Optional) Survey Number associated with historical datasets, (e.g., "SN8844")'
        value: ''
      - name: publish_to_odr
        value: 'false'
        enum:
          - 'false'
          - 'true'
      - name: target_bucket_name
        value: ''
        enum:
          - 'nz-imagery'
          - 'nz-elevation'
      - name: copy_option
        value: '--no-clobber'
        enum:
          - '--no-clobber'
          - '--force'
          - '--force-no-clobber'
  templateDefaults:
    container:
      imagePullPolicy: Always
      image: ''
  templates:
    - name: main
      inputs:
        parameters:
          - name: source
      dag:
        tasks:
          - name: collection-id-setup
            template: collection-id-setup

          - name: tile-index-validate
            templateRef:
              name: tpl-at-tile-index-validate
              template: main
            arguments:
              parameters:
                - name: scale
                  value: '{{workflow.parameters.scale}}'
                - name: include
                  value: '{{workflow.parameters.include}}'
                - name: source
                  value: '{{=sprig.trim(inputs.parameters.source)}}'
                - name: source_epsg
                  value: '{{=sprig.trim(workflow.parameters.source_epsg)}}'
                - name: validate
                  value: '{{= workflow.parameters.validate}}'
                - name: retile
                  value: '{{= workflow.parameters.retile}}'
                - name: version
                  value: '{{= workflow.parameters.version_argo_tasks}}'

          - name: group
            templateRef:
              name: tpl-at-group
              template: main
            arguments:
              artifacts:
                - name: input
                  from: '{{ tasks.tile-index-validate.outputs.artifacts.files }}'
              parameters:
                - name: size
                  value: '{{workflow.parameters.group}}'
                - name: version
                  value: '{{= workflow.parameters.version_argo_tasks}}'
            depends: 'tile-index-validate'

          - name: standardise-validate
            template: standardise-validate
            arguments:
              parameters:
                - name: group_id
                  value: '{{item}}'
                - name: collection-id
                  value: '{{tasks.collection-id-setup.outputs.parameters.collection-id}}'
                - name: target
                  value: '{{tasks.get-location.outputs.parameters.location}}flat/'
              artifacts:
                - name: group_data
                  from: '{{ tasks.group.outputs.artifacts.output }}'
            depends: 'group && collection-id-setup && get-location'
            withParam: '{{ tasks.group.outputs.parameters.output }}'

          - name: create-collection
            template: create-collection
            arguments:
              parameters:
                - name: collection-id
                  value: '{{tasks.collection-id-setup.outputs.parameters.collection-id}}'
                - name: location
                  value: '{{tasks.get-location.outputs.parameters.location}}'
            depends: 'standardise-validate'

          - name: stac-validate
            template: stac-validate
            arguments:
              parameters:
                - name: location
                  value: '{{tasks.get-location.outputs.parameters.location}}'
              artifacts:
                - name: stac-result
                  raw:
                    data: '{{tasks.stac-validate.outputs.result}}'
            depends: 'create-collection'

          - name: get-location
            template: get-location

          - name: create-overview
            when: "'{{workflow.parameters.target_epsg}}' =~ '2193|3857' && '{{workflow.parameters.compression}}' != 'dem_lerc'"
            arguments:
              parameters:
                - name: location
                  value: '{{tasks.get-location.outputs.parameters.location}}'
            template: create-overview
            depends: 'standardise-validate'

          - name: create-config
            when: "'{{workflow.parameters.target_epsg}}' =~ '2193|3857' && '{{workflow.parameters.compression}}' != 'dem_lerc'"
            arguments:
              parameters:
                - name: location
                  value: '{{tasks.get-location.outputs.parameters.location}}'
                - name: bucket
                  value: '{{tasks.get-location.outputs.parameters.bucket}}'
                - name: key
                  value: '{{tasks.get-location.outputs.parameters.key}}'
            template: create-config
            depends: 'create-overview'

          - name: publish-odr
            templateRef:
              name: publish-odr
              template: main
            when: "'{{workflow.parameters.publish_to_odr}}' == 'true'"
            arguments:
              parameters:
                - name: source
                  value: '{{tasks.get-location.outputs.parameters.location}}flat/'
                - name: target_bucket_name
                  value: '{{workflow.parameters.target_bucket_name}}'
                - name: copy_option
                  value: '{{workflow.parameters.copy_option}}'
                - name: ticket
                  value: '{{=sprig.trim(workflow.parameters.ticket)}}'
            depends: 'stac-validate && create-config'

      outputs:
        parameters:
          - name: target
            valueFrom:
              parameter: '{{tasks.get-location.outputs.parameters.location}}'
      # END TEMPLATE `main`

    - name: collection-id-setup
      script:
        image: '019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/topo-imagery:{{=sprig.trim(workflow.parameters.version_topo_imagery)}}'
        command: [python]
        source: |
          import ulid
          collection_id = "{{workflow.parameters.collection_id}}"
          with open("/tmp/collection-id", "w") as f:
            if not collection_id:
              f.write(str(ulid.ULID()))
            else:
              f.write(collection_id)
      outputs:
        parameters:
          - name: collection-id
            valueFrom:
              path: '/tmp/collection-id'

    - name: standardise-validate
      nodeSelector:
        karpenter.sh/capacity-type: 'spot'
      inputs:
        parameters:
          - name: group_id
          - name: collection-id
          - name: target
        artifacts:
          - name: group_data
            path: /tmp/input/
      container:
        image: '019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/topo-imagery:{{=sprig.trim(workflow.parameters.version_topo_imagery)}}'
        resources:
          requests:
            memory: 7.8Gi
            cpu: 15000m
            ephemeral-storage: 3Gi
        volumeMounts:
          - name: ephemeral
            mountPath: '/tmp'
        command:
          - python
          - '/app/scripts/standardise_validate.py'
        args:
          - '--from-file'
          - '/tmp/input/{{inputs.parameters.group_id}}.json'
          - '--target'
          - '{{inputs.parameters.target}}'
          - '--preset'
          - '{{workflow.parameters.compression}}'
          - '--start-datetime'
          - '{{=sprig.trim(workflow.parameters.start_datetime)}}'
          - '--end-datetime'
          - '{{=sprig.trim(workflow.parameters.end_datetime)}}'
          - '--collection-id'
          - '{{inputs.parameters.collection-id}}'
          - '--cutline'
          - '{{=sprig.trim(workflow.parameters.cutline)}}'
          - '--source-epsg'
          - '{{=sprig.trim(workflow.parameters.source_epsg)}}'
          - '--target-epsg'
          - '{{=sprig.trim(workflow.parameters.target_epsg)}}'
          - '--gsd'
          - '{{=sprig.trim(workflow.parameters.gsd)}}'

    - name: create-collection
      nodeSelector:
        karpenter.sh/capacity-type: 'spot'
      inputs:
        parameters:
          - name: collection-id
          - name: location
      outputs:
        artifacts:
          - name: capture-area
            path: '/tmp/capture-area.geojson'
            archive:
              none: {}
      container:
        image: '019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/topo-imagery:{{=sprig.trim(workflow.parameters.version_topo_imagery)}}'
        resources:
          requests:
            memory: 7.8Gi
            cpu: 15000m
        command:
          - python
          - '/app/scripts/collection_from_items.py'
        args:
          - '--uri'
          - '{{inputs.parameters.location}}flat/'
          - '--collection-id'
          - '{{inputs.parameters.collection-id}}'
          - '--category'
          - '{{=sprig.trim(workflow.parameters.category)}}'
          - '--region'
          - '{{=sprig.trim(workflow.parameters.region)}}'
          - '--gsd'
          - '{{=sprig.trim(workflow.parameters.gsd)}}'
          - '--geographic-description'
          - '{{=sprig.trim(workflow.parameters.geographic_description)}}'
          - '--start-date'
          - '{{=sprig.trim(workflow.parameters.start_datetime)}}'
          - '--end-date'
          - '{{=sprig.trim(workflow.parameters.end_datetime)}}'
          - '--event'
          - '{{=sprig.trim(workflow.parameters.event)}}'
          - '--historic-survey-number'
          - '{{=sprig.trim(workflow.parameters.historic_survey_number)}}'
          - '--lifecycle'
          - '{{=sprig.trim(workflow.parameters.lifecycle)}}'
          - '--producer'
          - '{{workflow.parameters.producer}}'
          - '--producer-list'
          - '{{=sprig.trim(workflow.parameters.producer_list)}}'
          - '--licensor'
          - '{{workflow.parameters.licensor}}'
          - '--licensor-list'
          - '{{=sprig.trim(workflow.parameters.licensor_list)}}'
          - '--concurrency'
          - '25'

    - name: stac-validate
      inputs:
        parameters:
          - name: location
      container:
        image: '019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/argo-tasks:{{=sprig.trim(workflow.parameters.version_argo_tasks)}}'
        command: [node, /app/index.js]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args: ['stac', 'validate', '--recursive', '{{inputs.parameters.location}}flat/collection.json']

    - name: get-location
      script:
        image: '019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/argo-tasks:{{=sprig.trim(workflow.parameters.version_argo_tasks)}}'
        command: [node]
        source: |
          const fs = require('fs');
          const loc = JSON.parse(process.env['ARGO_TEMPLATE']).archiveLocation.s3;
          const key = loc.key.replace('{{pod.name}}','');
          fs.writeFileSync('/tmp/location', `s3://${loc.bucket}/${key}`);
          fs.writeFileSync('/tmp/bucket', `${loc.bucket}`);
          fs.writeFileSync('/tmp/key', `${key}`);
      outputs:
        parameters:
          - name: location
            valueFrom:
              path: '/tmp/location'
          - name: bucket
            valueFrom:
              path: '/tmp/bucket'
          - name: key
            valueFrom:
              path: '/tmp/key'

    - name: create-overview
      inputs:
        parameters:
          - name: location
      container:
        image: 'ghcr.io/linz/basemaps/cli:{{=sprig.trim(workflow.parameters.version_basemaps_cli)}}'
        resources:
          requests:
            cpu: 3000m
            memory: 7.8Gi
        command: [node, index.cjs]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          [
            '-V',
            'create-overview',
            '--source',
            '{{inputs.parameters.location}}flat/',
            '--output',
            '{{inputs.parameters.location}}flat/',
          ]

    - name: create-config
      inputs:
        parameters:
          - name: location
            description: Location of the imagery to create config for
          - name: bucket
          - name: key
      container:
        image: 'ghcr.io/linz/basemaps/cli:{{=sprig.trim(workflow.parameters.version_basemaps_cli)}}'
        command: [node, /app/node_modules/.bin/cogify]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.basemaps.json
        args:
          - 'config'
          - '{{ inputs.parameters.location }}flat/'
      outputs:
        parameters:
          - name: url
            description: Basemaps URL to view the imagery
            valueFrom:
              path: '/tmp/cogify/config-url'
          - name: config
            description: Location of the config file
            valueFrom:
              path: '/tmp/cogify/config-path'
        artifacts:
          - name: url
            path: '/tmp/cogify/config-url'
            s3:
              bucket: '{{inputs.parameters.bucket}}'
              key: '{{inputs.parameters.key}}flat/config-url'
            archive:
              none: {}

  volumes:
    - name: ephemeral
      emptyDir: {}
