---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: create-thumbnails
  namespace: argo
spec:
  parallelism: 50
  nodeSelector:
    karpenter.sh/capacity-type: "spot"
  entrypoint: main
  arguments:
    parameters:
      # FIXME: Should use camelCase or underscore?
      - name: version-argo-tasks
        value: "v2"
      - name: version-topo-imagery
        value: "v3"
      - name: source
        value: "s3://linz-topographic-upload/maps/topo50/"
      - name: target
        value: "s3://linz-"
      - name: include
        value: ".*.*.tif?$"
      - name: transform
        value: "f"
      - name: copy-option
        value: "--no-clobber"
  templateDefaults:
    container:
      imagePullPolicy: Always
  templates:
    - name: main
      dag:
        tasks:
          - name: aws-list
            template: aws-list

          - name: get-location
            template: get-location

          - name: thumbnails
            template: thumbnails
            arguments:
              parameters:
                - name: target
                  value: "{{tasks.get-location.outputs.parameters.location}}thumbnails/"
              artifacts:
                - name: files
                  from: "{{ tasks.aws-list.outputs.artifacts.files }}"
            depends: "aws-list && get-location"

          - name: publish-source
            templateRef:
              name: publish-copy
              template: main
            arguments:
              parameters:
                - name: source
                  value: "{{workflow.parameters.source}}"
                - name: include
                  value: "{{workflow.parameters.include}}"
                - name: group
                  value: "1000"
                - name: group-size
                  value: "100Gi"
            depends: "thumbnails"

          - name: publish-thumbnails
            templateRef:
              name: publish-copy
              template: main
            arguments:
              parameters:
                - name: source
                  value: "{{tasks.get-location.outputs.parameters.location}}thumbnails/"
                - name: include
                  value: ".jpg?$"
                - name: group
                  value: "1000"
                - name: group-size
                  value: "100Gi"
            depends: "thumbnails"
      # END TEMPLATE `main`

    - name: aws-list
      inputs:
      container:
        image: 019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/eks:argo-tasks-{{workflow.parameters.version-argo-tasks}}
        command: [node, /app/index.js]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          [
            "list",
            "--verbose",
            "--include",
            "{{workflow.parameters.include}}",
            "--group",
            "2000",
            "--output",
            "/tmp/file_list.json",
            "{{workflow.parameters.source}}",
          ]
      outputs:
        artifacts:
          - name: files
            path: /tmp/file_list.json

    - name: thumbnails
      retryStrategy:
        limit: "2"
      nodeSelector:
        karpenter.sh/capacity-type: "spot"
      inputs:
        parameters:
          - name: target
        artifacts:
          - name: files
            path: /tmp/file_list.json
      container:
        image: "019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/eks:topo-imagery-{{=sprig.trim(workflow.parameters['version-topo-imagery'])}}"
        resources:
          requests:
            memory: 7.8Gi
            cpu: 15000m
            ephemeral-storage: 3Gi
        volumeMounts:
          - name: ephemeral
            mountPath: "/tmp"
        command:
          - python
          - "/app/scripts/thumbnails.py"
        args:
          - "--from-file"
          - "/tmp/file_list.json"
          - "--target"
          - "{{inputs.parameters.target}}"

    - name: get-location
      script:
        image: "019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/eks:argo-tasks-{{=sprig.trim(workflow.parameters['version-argo-tasks'])}}"
        command: [node]
        source: |
          const fs = require('fs');
          const loc = JSON.parse(process.env['ARGO_TEMPLATE']).archiveLocation.s3;
          const key = loc.key.replace('{{pod.name}}','');
          fs.writeFileSync('/tmp/location', `s3://${loc.bucket}/${key}`);
      outputs:
        parameters:
          - name: location
            valueFrom:
              path: "/tmp/location"

  volumes:
    - name: ephemeral
      emptyDir: {}
