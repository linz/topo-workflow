# yaml-language-server: $schema=https://raw.githubusercontent.com/argoproj/argo-workflows/v3.5.5/api/jsonschema/schema.json

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: create-thumbnails
  labels:
    linz.govt.nz/category: util
    linz.govt.nz/data-type: raster
    linz.govt.nz/data-sub-type: maps
spec:
  parallelism: 50
  nodeSelector:
    karpenter.sh/capacity-type: 'spot'
  entrypoint: main
  onExit: exit-handler
  arguments:
    parameters:
      - name: version_argo_tasks
        value: 'v4'
      - name: version_topo_imagery
        value: 'v4'
      - name: source
        value: 's3://linz-topographic-upload/maps/topo50/'
      - name: include
        value: '.*.tiff?$'
  templateDefaults:
    container:
      imagePullPolicy: Always
      image: ''
  templates:
    - name: main
      dag:
        tasks:
          - name: aws-list
            template: aws-list

          - name: get-location
            templateRef:
              name: tpl-get-location
              template: main

          - name: thumbnails
            template: thumbnails
            arguments:
              parameters:
                - name: target
                  value: '{{tasks.get-location.outputs.parameters.location}}thumbnails/'
              artifacts:
                - name: files
                  from: '{{ tasks.aws-list.outputs.artifacts.files }}'
            depends: 'aws-list && get-location'
      # END TEMPLATE `main`

    - name: aws-list
      container:
        image: 019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/argo-tasks:{{workflow.parameters.version_argo_tasks}}
        command: [node, /app/index.js]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          [
            'list',
            '--verbose',
            '--include',
            '{{workflow.parameters.include}}',
            '--group',
            '2000',
            '--output',
            '/tmp/file_list.json',
            '{{workflow.parameters.source}}',
          ]
      outputs:
        artifacts:
          - name: files
            path: /tmp/file_list.json

    - name: thumbnails
      nodeSelector:
        karpenter.sh/capacity-type: 'spot'
      inputs:
        parameters:
          - name: target
        artifacts:
          - name: files
            path: /tmp/file_list.json
      outputs:
        parameters:
          - name: count
            globalName: count
            valueFrom:
              path: /tmp/thumbnails/count
      container:
        image: '019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/topo-imagery:{{=sprig.trim(workflow.parameters.version_topo_imagery)}}'
        resources:
          requests:
            memory: 7.8Gi
            cpu: 15000m
            ephemeral-storage: 3Gi
        volumeMounts:
          - name: ephemeral
            mountPath: '/tmp'
        args:
          - python
          - '/app/scripts/thumbnails.py'
          - '--from-file'
          - '/tmp/file_list.json'
          - '--target'
          - '{{inputs.parameters.target}}'

    - name: exit-handler
      steps:
        - - name: notify
            template: notify-slack
            when: "{{workflow.status}} == Succeeded"

    - name: notify-slack
      inputs:
        parameters:
          - name: count
            value: "{{workflow.outputs.parameters.count}}"
      script:
        image: "019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/eks:argo-tasks-{{=sprig.trim(workflow.parameters['version-argo-tasks'])}}"
        env:
          - name: PARAMS
            value: "{{workflow.parameters}}"
          - name: WEBHOOK
            valueFrom:
              secretKeyRef:
                name: slack-linz-webhook # name of the secret that stores linz Slack webhook
                key: url # the Slack Webhook URL is stored as `url`
        command: [node]
        source: |
          const slackWebhook = process.env.WEBHOOK
          const params = JSON.parse(process.env.PARAMS);

          var paramFields = []
          params.forEach((param) => paramFields.push({type: "mrkdwn", text: "*" + param.name + ":*\n " + param.value}));

          const payload = {
              icon_url: "https://cncf-branding.netlify.app/img/projects/argo/icon/color/argo-icon-color.png",
              username: "Argo Workflows [bot]",
              channel: "#alert-argo-workflows",
              blocks: [
                {
                  type: "header",
                  text: {
                    type: "plain_text",
                    text: ":frame_with_picture: Thumbnails Created",
                    emoji: true
                  }
                },
                {
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: "{{inputs.parameters.count}} files have been generated."
                  }
                },
                {
                  type: "section",
                  fields: paramFields
                },
              ],
            };

          fetch(slackWebhook, {
            method: "POST",
            body: JSON.stringify(payload),
            headers: {
                "Content-Type": "application/json; charset=utf-8",
                "Content-Length": JSON.stringify(payload).length,
                Accept: "application/json",
          },
          })
          .then((res) => {
            console.log(res);
          })
          .catch((error) => {
              console.log(error);
          });

  volumes:
    - name: ephemeral
      emptyDir: {}
