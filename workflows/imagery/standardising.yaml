---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: imagery-standardising-v0.2.0-75
  namespace: argo
spec:
  parallelism: 50
  nodeSelector:
    karpenter.sh/capacity-type: "spot"
  entrypoint: main
  synchronization:
    semaphore:
      configMapKeyRef:
        name: semaphores
        key: standardising
  arguments:
    parameters:
      - name: source
        value: "s3://linz-imagery-staging/test/sample/"
      - name: include
        value: ".tiff?$"
      - name: scale
        value: "500"
        enum:
          - "500"
          - "1000"
          - "2000"
          - "5000"
          - "10000"
      - name: group
        value: "50"
      - name: compression
        value: "webp"
        enum:
          - "webp"
          - "lzw"
      - name: cutline
        description: "(Optional) location of a cutline file to cut the imagery to .fgb or .geojson"
        value: ""
      - name: title
        value: "*Region/District/City* *GSD* *Urban/Rural* Aerial Photos (*Year-Year*)"
      - name: description
        value: "Orthophotography within the *Region Name* region captured in the *Year*-*Year* flying season."
      - name: start-datetime
        value: "YYYY-MM-DD"
      - name: end-datetime
        value: "YYYY-MM-DD"
      - name: copy-option
        value: "--no-clobber"
        enum:
          - "--no-clobber"
          - "--force"
  templates:
    - name: main
      dag:
        tasks:
          - name: aws-list
            template: aws-list
          - name: generate-ulid
            template: generate-ulid
          - name: standardise-validate
            template: standardise-validate
            arguments:
              parameters:
                - name: file
                  value: "{{item}}"
                - name: collection-id
                  value: "{{tasks.generate-ulid.outputs.parameters.ulid}}"
            depends: "aws-list && generate-ulid"
            withParam: "{{tasks.aws-list.outputs.parameters.files}}"
          - name: flatten
            template: flatten
            arguments:
              parameters:
                - name: location
                  value: "{{tasks.get-location.outputs.parameters.location}}"
            depends: "get-location && standardise-validate"
          - name: flatten-copy
            template: flatten-copy
            arguments:
              parameters:
                - name: file
                  value: "{{item}}"
            depends: "flatten"
            withParam: "{{tasks.flatten.outputs.parameters.files}}"
          - name: create-collection
            template: create-collection
            arguments:
              parameters:
                - name: collection-id
                  value: "{{tasks.generate-ulid.outputs.parameters.ulid}}"
                - name: location
                  value: "{{tasks.get-location.outputs.parameters.location}}"
            depends: "flatten-copy"
          - name: stac-validate
            template: stac-validate
            arguments:
              parameters:
                - name: location
                  value: "{{tasks.get-location.outputs.parameters.location}}"
              artifacts:
                - name: stac-result
                  raw:
                    data: "{{tasks.stac-validate.outputs.result}}"
            depends: "create-collection"
          - name: get-location
            template: get-location
          - name: create-overview
            arguments:
              parameters:
                - name: location
                  value: "{{tasks.get-location.outputs.parameters.location}}"
            template: create-overview
            depends: "get-location && flatten-copy"
          - name: create-config
            arguments:
              parameters:
                - name: location
                  value: "{{tasks.get-location.outputs.parameters.location}}"
            template: create-config
            depends: "get-location && create-overview"
    - name: aws-list
      container:
        image: ghcr.io/linz/argo-tasks:v1.0.0-50-g007ed49
        command: [node, /app/index.js]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          [
            "list",
            "--verbose",
            "--include",
            "{{workflow.parameters.include}}",
            "--group",
            "{{workflow.parameters.group}}",
            "--output",
            "/tmp/file_list.json",
            "{{workflow.parameters.source}}",
          ]
      outputs:
        parameters:
          - name: files
            valueFrom:
              path: /tmp/file_list.json
    - name: generate-ulid
      script:
        image: ghcr.io/linz/topo-imagery:v0.2.0-75-gcfa20cf
        command: [python]
        source: |
          import ulid
          with open("/tmp/ulid", "w") as f:
            f.write(str(ulid.ULID()))
      outputs:
        parameters:
          - name: ulid
            valueFrom:
              path: "/tmp/ulid"
    - name: standardise-validate
      retryStrategy:
        limit: "2"
      nodeSelector:
        karpenter.sh/capacity-type: "spot"
      inputs:
        parameters:
          - name: file
          - name: collection-id
      container:
        image: ghcr.io/linz/topo-imagery:v0.2.0-75-gcfa20cf
        resources:
          requests:
            memory: 7.8Gi
            cpu: 15000m
            ephemeral-storage: 3Gi
        volumeMounts:
          - name: ephemeral
            mountPath: "/tmp"
        command:
          - python
          - "/app/scripts/standardise_validate.py"
        args:
          - "--source"
          - "{{inputs.parameters.file}}"
          - "--scale"
          - "{{workflow.parameters.scale}}"
          - "--preset"
          - "{{workflow.parameters.compression}}"
          - "--start-datetime"
          - "{{workflow.parameters.start-datetime}}"
          - "--end-datetime"
          - "{{workflow.parameters.end-datetime}}"
          - "--collection-id"
          - "{{inputs.parameters.collection-id}}"
          - "--cutline"
          - "{{workflow.parameters.cutline}}"
      outputs:
        artifacts:
          - name: standardised_tiffs
            path: /tmp/
            archive:
              none: {}
    - name: flatten
      inputs:
        parameters:
          - name: location
      container:
        image: ghcr.io/linz/argo-tasks:v1.0.0-50-g007ed49
        command: [node, /app/index.js]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          [
            "create-manifest",
            "--flatten",
            "--verbose",
            "--include",
            ".tiff?$|.json$",
            "--group",
            "1000",
            "--group-size",
            "100Gi",
            "--output",
            "/tmp/file_list.json",
            "--target",
            "{{inputs.parameters.location}}flat/",
            "{{inputs.parameters.location}}",
          ]
      outputs:
        parameters:
          - name: files
            valueFrom:
              path: /tmp/file_list.json
    - name: flatten-copy
      retryStrategy:
        limit: "2"
      inputs:
        parameters:
          - name: file
      container:
        image: ghcr.io/linz/argo-tasks:v1.0.0-50-g007ed49
        resources:
          requests:
            memory: 7.8Gi
            cpu: 2000m
        command: [node, /app/index.js]
        args:
          [
            "copy",
            "{{workflow.parameters.copy-option}}",
            "{{inputs.parameters.file}}",
          ]
    - name: create-collection
      retryStrategy:
        limit: "2"
      nodeSelector:
        karpenter.sh/capacity-type: "spot"
      inputs:
        parameters:
          - name: collection-id
          - name: location
      container:
        image: ghcr.io/linz/topo-imagery:v0.2.0-75-gcfa20cf
        resources:
          requests:
            memory: 7.8Gi
            cpu: 2000m
        command:
          - python
          - "/app/scripts/collection_from_items.py"
        args:
          - "--uri"
          - "{{inputs.parameters.location}}flat/"
          - "--collection-id"
          - "{{inputs.parameters.collection-id}}"
          - "--title"
          - "{{workflow.parameters.title}}"
          - "--description"
          - "{{workflow.parameters.description}}"
          - "--concurrency"
          - "25"
    - name: stac-validate
      inputs:
        parameters:
          - name: location
      container:
        image: ghcr.io/linz/argo-tasks:v1.0.0-50-g007ed49
        command: [node, /app/index.js]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          [
            "stac-validate",
            "--recursive",
            "{{inputs.parameters.location}}flat/collection.json",
          ]
    - name: get-location
      script:
        image: node:alpine
        command: [node]
        source: |
          const fs = require('fs');
          const loc = JSON.parse(process.env['ARGO_TEMPLATE']).archiveLocation.s3;
          const key = loc.key.replace('{{pod.name}}','');
          fs.writeFileSync('/tmp/location', `s3://${loc.bucket}/${key}`);
      outputs:
        parameters:
          - name: location
            valueFrom:
              path: "/tmp/location"
    - name: create-overview
      inputs:
        parameters:
          - name: location
      container:
        image: ghcr.io/linz/basemaps/cli:v6.38.0-23-gd4715ac0
        resources:
          requests:
            cpu: 3000m
        command: [node, index.cjs]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          [
            "-V",
            "create-overview",
            "--source",
            "{{inputs.parameters.location}}flat/",
            "--output",
            "{{inputs.parameters.location}}flat/",
          ]
    - name: create-config
      inputs:
        parameters:
          - name: location
      container:
        image: ghcr.io/linz/basemaps/cli:v6.38.0-23-gd4715ac0
        command: [node, index.cjs]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          [
            "-V",
            "create-config",
            "--path",
            "{{inputs.parameters.location}}flat/",
            "--output",
            "/tmp/url",
            "--title",
            "{{workflow.parameters.title}}",
            "--commit",
          ]
      outputs:
        parameters:
          - name: url
            valueFrom:
              path: "/tmp/url"
  volumes:
    - name: ephemeral
      emptyDir: {}
