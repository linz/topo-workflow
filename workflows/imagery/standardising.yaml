---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: imagery-standardise-v0.2.0-20
spec:
  parallelism: 20
  nodeSelector:
    karpenter.sh/capacity-type: "spot"
  entrypoint: main
  arguments:
    parameters:
      - name: source
        value: "s3://linz-imagery-staging/test/sample/"
      - name: filter
        value: ".tiff?$"
      - name: group
        value: 10
  templates:
    - name: main
      dag:
        tasks:
          - name: aws-list
            template: aws-list
            arguments:
              parameters:
                - name: source
                  value: "{{workflow.parameters.source}}"
                - name: filter
                  value: "{{workflow.parameters.filter}}"
          - name: standardise
            template: standardise
            arguments:
              parameters:
                - name: file
                  value: "{{item}}"
            depends: "aws-list"
            withParam: "{{tasks.aws-list.outputs.parameters.files}}"
          - name: get-bucket
            template: get-bucket
          - name: get-key
            template: get-key
            depends: "get-bucket"
          - name: create-config
            arguments:
              parameters:
                - name: bucket
                  value: "{{tasks.get-bucket.outputs.parameters.bucket}}"
                - name: key
                  value: "{{tasks.get-key.outputs.parameters.key}}"
            template: create-config
            depends: "get-key && standardise"
    - name: aws-list
      inputs:
        parameters:
          - name: source
          - name: filter
      container:
        image: ghcr.io/linz/basemaps/cli:v6.33.0
        command: [node, index.cjs]
        args:
          [
            "-V",
            "list",
            "--filter",
            "{{inputs.parameters.filter}}",
            "--group",
            "{{workflow.parameters.group}}",
            "--output",
            "/tmp/file_list.json",
            "--config",
            "s3://linz-bucket-config/config.json",
            "{{inputs.parameters.source}}",
          ]
      outputs:
        parameters:
          - name: files
            valueFrom:
              path: /tmp/file_list.json
    - name: standardise
      retryStrategy:
        limit: "2"
      inputs:
        parameters:
          - name: file
      container:
        image: ghcr.io/linz/topo-imagery:v0.2.0-20-ged4d623
        resources:
          requests:
            memory: 2Gi
            cpu: 4000m
            ephemeral-storage: 9Gi
        volumeMounts:
          - name: ephemeral
            mountPath: "/tmp"
        command:
          - python
          - "/app/standardising.py"
        args:
          - "--source"
          - "{{inputs.parameters.file}}"
      outputs:
        artifacts:
          - name: standardised_tiffs
            path: /tmp/
            archive:
              none: {}
    - name: get-bucket
      container:
        image: stedolan/jq:latest
        command: [sh, -c]
        args:
          [printenv ARGO_TEMPLATE | jq -r '.archiveLocation.s3.bucket' > /tmp/bucket]
      outputs:
        parameters:
          - name: bucket
            valueFrom:
              path: "/tmp/bucket"
    - name: get-key
      container:
        image: stedolan/jq:latest
        command: [sh, -c]
        args: [printenv ARGO_TEMPLATE | jq -r '.archiveLocation.s3.key' | cut -d '/' -f-2 > /tmp/key]
      outputs:
        parameters:
          - name: key
            valueFrom:
              path: "/tmp/key"
    - name: create-config
      inputs:
        parameters:
          - name: bucket
          - name: key
      container:
        image: ghcr.io/linz/basemaps/cli:v6.33.0-12-gcd564b11 # TODO: Update this after create-config cli released.
        command: [node, index.cjs]
        args:
          [
            "-V",
            "create-config",
            "--path",
            "s3://{{inputs.parameters.bucket}}/{{inputs.parameters.key}}",
            "--config",
            "s3://linz-bucket-config/config.json",
            "--commit",
          ]
  volumes:
    - name: ephemeral
      emptyDir: {}
