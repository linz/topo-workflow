---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: publish-odr
  namespace: argo
spec:
  parallelism: 50
  nodeSelector:
    karpenter.sh/capacity-type: "spot"
  entrypoint: main
  synchronization:
    semaphore:
      configMapKeyRef:
        name: semaphores
        key: bulkcopy
  arguments:
    parameters:
      - name: version-argo-tasks
        value: "v2"
      - name: source
        value: "s3://linz-imagery-staging/test/sample/"
      - name: target
        value: "s3://linz-imagery-staging/test/sample_target/"
      - name: include
        value: ".tiff?$|.json$|.tfw$"
      - name: copy-option
        value: "--no-clobber"
        enum:
          - "--no-clobber"
          - "--force"
          - "--force-no-clobber"
      - name: group
        value: "1000"
      - name: group-size
        value: "100Gi"
      - name: transform
        value: "f"
  templateDefaults:
    container:
      imagePullPolicy: Always
  templates:
    - name: main
      inputs:
        parameters:
          - name: source
          - name: include
          - name: group
          - name: group-size
      dag:
        tasks:
          - name: create-manifest-github
            template: create-manifest
            arguments:
              parameters:
                - name: source
                  value: "{{inputs.parameters.source}}"
                - name: target
                  value: "{{workflow.parameters.target}}"
                - name: include
                  value: "{{inputs.parameters.include}}"
                - name: exclude
                  value: "collection.json$"
                - name: group
                  value: "{{inputs.parameters.group}}"
                - name: group-size
                  value: "{{inputs.parameters.group-size}}"
                - name: version-argo-tasks
                  value: "{{workflow.parameters.version-argo-tasks}}"
            when: "{{=sprig.regexMatch('s3://nz-imagery/', workflow.parameters.target)}}"
          - name: create-manifest
            template: create-manifest
            arguments:
              parameters:
                - name: source
                  value: "{{inputs.parameters.source}}"
                - name: target
                  value: "{{workflow.parameters.target}}"
                - name: include
                  value: "{{inputs.parameters.include}}"
                - name: exclude
                  value: ""
                - name: group
                  value: "{{inputs.parameters.group}}"
                - name: group-size
                  value: "{{inputs.parameters.group-size}}"
                - name: version-argo-tasks
                  value: "{{workflow.parameters.version-argo-tasks}}"
            depends: "create-manifest-github.Skipped"
          - name: copy-with-github
            template: copy
            arguments:
              parameters:
                - name: copy-option
                  value: "{{workflow.parameters.copy-option}}"
                - name: file
                  value: "{{item}}"
                - name: version-argo-tasks
                  value: "{{workflow.parameters.version-argo-tasks}}"
            depends: "create-manifest-github.Succeeded"
            withParam: "{{tasks.create-manifest-github.outputs.parameters.files}}"
          - name: copy
            template: copy
            arguments:
              parameters:
                - name: copy-option
                  value: "{{workflow.parameters.copy-option}}"
                - name: file
                  value: "{{item}}"
                - name: version-argo-tasks
                  value: "{{workflow.parameters.version-argo-tasks}}"
            depends: "create-manifest"
            withParam: "{{tasks.create-manifest.outputs.parameters.files}}"
          - name: push-to-github
            template: push-to-github
            arguments:
              parameters:
                - name: source
                  value: "{{inputs.parameters.source}}"
            depends: "copy-with-github"
    - name: create-manifest
      inputs:
        parameters:
          - name: source
          - name: include
          - name: exclude
          - name: group
          - name: group-size
      container:
        image: "019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/eks:argo-tasks-{{=sprig.trim(workflow.parameters['version-argo-tasks'])}}"
        command: [node, /app/index.js]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          [
            "create-manifest",
            "--verbose",
            "--include",
            "{{=sprig.trim(inputs.parameters.include)}}",
            "--exclude",
            "{{inputs.parameters.exclude}}",
            "--group",
            "{{=sprig.trim(inputs.parameters.group)}}",
            "--group-size",
            "{{=sprig.trim(inputs.parameters['group-size'])}}",
            "--output",
            "/tmp/file_list.json",
            "--target",
            "{{=sprig.trim(workflow.parameters.target)}}",
            "{{=sprig.trim(inputs.parameters.source)}}",
            "--transform",
            "{{=sprig.trim(workflow.parameters.transform)}}",
          ]
      outputs:
        parameters:
          - name: files
            valueFrom:
              path: /tmp/file_list.json
    - name: copy
      retryStrategy:
        limit: "2"
      inputs:
        parameters:
          - name: file
      container:
        image: "019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/eks:argo-tasks-{{=sprig.trim(workflow.parameters['version-argo-tasks'])}}"
        resources:
          requests:
            memory: 7.8Gi
            cpu: 2000m
        command: [node, /app/index.js]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config-write.open-data-registry.json,s3://linz-bucket-config/config.json
        args:
          [
            "copy",
            "--fix-content-type=true",
            "{{workflow.parameters.copy-option}}",
            "{{inputs.parameters.file}}",
          ]
    - name: push-to-github
      retryStrategy:
        limit: "2"
      inputs:
        parameters:
          - name: source
      container:
        image: "019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/eks:argo-tasks-{{=sprig.trim(workflow.parameters['version-argo-tasks'])}}"
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
          - name: GIT_AUTHOR_NAME
            value: "{{=sprig.regexFind('imagery', workflow.parameters.target)}}[bot]"
          - name: GIT_AUTHOR_EMAIL
            value: "{{=sprig.regexFind('imagery', workflow.parameters.target)}}@linz.govt.nz"
        volumeMounts:
          - name: secret-volume
            mountPath: "/root/.ssh/"
        command: [node, /app/index.js]
        args:
          [
            "stac",
            "github-import",
            "--source",
            "{{=sprig.trim(inputs.parameters.source)}}",
            "--target",
            "{{=sprig.trim(workflow.parameters.target)}}",
            "--repo-name",
            "linz/{{=sprig.regexFind('imagery', workflow.parameters.target)}}",
          ]
  volumes:
    - name: secret-volume
      secret:
        secretName: "github-linz-{{=sprig.regexFind('imagery', workflow.parameters.target)}}"
        defaultMode: 384
