apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: test-cogify-
  namespace: argo
spec:
  parallelism: 100
  entrypoint: main
  arguments:
    parameters:
      - name: version-basemaps-cli
        description: Version of the basemaps CLI docker container to use
        value: latest

      - name: source
        description: Source imagery location "s3://linz-imagery"
      
      - name: target
        description: Target location for output COGS

      - name: tile-matrix
        description: Output tile matrix
        value: '["NZTM2000Quad", "WebMercatorQuad"]'
        enum:
          - '["NZTM2000Quad"]'
          - '["WebMercatorQuad"]'
          - '["NZTM2000Quad", "WebMercatorQuad"]'

      - name: cutline
        description: Path to cutline to apply
        value: "s3://linz-basemaps-source/cutline/2020-05-07-cutline-nz-coasts-rural-and-urban.geojson"

      - name: cutline-blend
        description: Blending to use for cutline see gdal_translate#cblend
        value: 20

  templates:
    # Main entrypoint into the workflow
    - name: main
      inputs:
        parameters:
          - name: source
          - name: target
          - name: tile-matrix
          - name: cutline
          - name: cutline-blend
      dag:
        tasks:
          # For each tile matrix specified run the "cogify" template
          - name: cogify
            template: cogify
            withParam: "{{workflow.parameters.tile-matrix}}"
            arguments:
              parameters:
                - name: source
                  value: "{{inputs.parameters.source}}"
                - name: target
                  value: "{{inputs.parameters.target}}"
                - name: tile-matrix
                  value: "{{item}}"
                - name: cutline
                  value: "{{inputs.parameters.cutline}}"
                - name: cutline-blend
                  value: "{{inputs.parameters.cutline-blend}}"

          - name: cogify-done
            template: echo
            depends: cogify
            arguments:
              parameters:
                - name: echo
                  value: "{{tasks.cogify.outputs.parameters}}"

    # Generate COGs for a specific tile matrix from a given collection of source imagery
    - name: cogify
      inputs:
        parameters:
          - name: source
          - name: target
          - name: tile-matrix
          - name: cutline
          - name: cutline-blend
      dag:
        tasks:
          # generate a tile covering from the source imagery
          - name: create-covering
            template: create-covering
            arguments:
              parameters:
                - name: source
                  value: "{{inputs.parameters.source}}"
                - name: target
                  value: "{{inputs.parameters.target}}"
                - name: tile-matrix
                  value: "{{inputs.parameters.tile-matrix}}"
                - name: cutline
                  value: "{{inputs.parameters.cutline}}"
                - name: cutline-blend
                  value: "{{inputs.parameters.cutline-blend}}"

          # Create COGS from the output of create-covering
          - name: create-cog
            depends: create-covering
            template: create-cog
            withParam: "{{tasks.create-covering.outputs.parameters.tiles}}"
            arguments:
              parameters:
                - name: source
                  value: "{{item.path}}"

          # once all COGs are created generate a more overviews to increase tile rendering performance
          - name: create-overview
            template: create-overview
            depends: create-cog
            arguments:
              parameters:
                - name: path
                  value: "{{tasks.create-covering.outputs.parameters.target}}"

          # Create a basemaps config to view the imagery directly
          - name: create-config
            template: create-config
            depends: create-overview
            arguments:
              parameters:
                - name: path
                  value: "{{tasks.create-covering.outputs.parameters.target}}"
                - name: title
                  value: "{{tasks.create-covering.outputs.parameters.title}}"

      outputs:
        parameters:
          - name: target
            description: location of where the output tiffs were created
            valueFrom:
              parameter: "{{tasks.create-covering.outputs.parameters.target}}"

    - name: echo
      inputs:
        parameters:
          - name: echo
      container:
        image: ghcr.io/blacha/basemaps:latest
        command: [echo]
        args:
          - "{{inputs.parameters.echo}}"

    # Generate a tile covering for input imagery
    - name: create-covering
      inputs:
        parameters:
          - name: source
          - name: target
          - name: tile-matrix
          - name: cutline
          - name: cutline-blend
      container:
        image: ghcr.io/blacha/basemaps:latest
        command: [node, /app/node_modules/.bin/cogify]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          - "cover"
          - "--tile-matrix"
          - "{{inputs.parameters.tile-matrix}}"
          - "--cutline"
          - "{{=sprig.trim(inputs.parameters.cutline)}}"
          - "--cutline-blend"
          - "{{inputs.parameters.cutline-blend}}"
          - "--target"
          - "{{=sprig.trim(inputs.parameters.target)}}"
          - "{{=sprig.trim(inputs.parameters.source)}}"
      outputs:
        parameters:
          - name: target
            description: output path for where the covering was written
            valueFrom:
              path: /tmp/cogify/cover-target

          - name: title
            description: Title for the covering
            valueFrom:
              path: /tmp/cogify/cover-title

          - name: tiles
            description: JSON array of all the tiles that need to be created
            valueFrom:
              path: /tmp/cogify/cover-items.json

    # Actually create COGs using gdal_translate on a large spot instances
    - name: create-cog
      nodeSelector:
        karpenter.sh/capacity-type: "spot"
      inputs:
        parameters:
          - name: source
      container:
        resources:
          requests:
            memory: 7.8Gi
            cpu: 15000m
        image: ghcr.io/blacha/basemaps:latest
        command: [node, /app/node_modules/.bin/cogify]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          - "create"
          - "{{=sprig.trim(inputs.parameters.source)}}"

    # Create a basemaps configuration file to view the imagery
    - name: create-config
      inputs:
        parameters:
          - name: path
            description: Location of the imagery to create config for
      container:
        image: ghcr.io/blacha/basemaps:latest
        command: [node, /app/node_modules/.bin/cogify]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          - "config"
          - "{{inputs.parameters.path}}"
      outputs:
        parameters:
          - name: url
            description: Basemaps URL to view the imagery
            valueFrom:
              path: "/tmp/cogify/config-url.json"

    # create additional overviews for any COGs found in the path
    - name: create-overview
      nodeSelector:
        karpenter.sh/capacity-type: "spot"
      inputs:
        parameters:
          - name: path
            description: Location of the imagery to create overviews for
      container:
        resources:
          requests:
            memory: 7.8Gi
            cpu: 15000m
        image: ghcr.io/blacha/basemaps:latest
        command: [node, index.cjs]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          - "-V"
          - "create-overview"
          - "--source"
          - "{{=sprig.trim(inputs.parameters.path)}}"
          - "--output"
          - "{{=sprig.trim(inputs.parameters.path)}}"
