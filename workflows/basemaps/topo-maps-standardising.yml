# yaml-language-server: $schema=https://raw.githubusercontent.com/argoproj/argo-workflows/v3.5.5/api/jsonschema/schema.json

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: test-topo-maps-standardising
  labels:
    linz.govt.nz/category: basemaps
    linz.govt.nz/data-type: raster
spec:
  parallelism: 50
  entrypoint: main
  onExit: exit-handler
  templateDefaults:
    container:
      imagePullPolicy: Always
      image: ''
  podMetadata:
    labels:
      linz.govt.nz/category: basemaps
      linz.govt.nz/data-type: raster
  arguments:
    parameters:
      - name: version_basemaps_cli
        description: Version of the basemaps CLI docker container to use
        value: v7

      - name: version_argo_tasks
        description: Version of the argo tasks CLI docker container to use
        value: pr-1145

      - name: source
        description: Source topographic map location
        value: 's3://linz-topographic-upload/topographic/TopoReleaseArchive/NZTopo50_GeoTif_Gridless/'

      - name: target
        description: Target location for output COGs
        value: 's3://linz-basemaps-staging/'
        enum:
          - 's3://linz-basemaps-staging/'
          - 's3://linz-topographic/'

      - name: title
        description: Title of the processed map
        value: 'Raster Topographic Maps 50k'
        enum:
          - 'Raster Topographic Maps 50k'
          - 'Raster Topographic Maps 250k'

      - name: scale
        description: topo50 or topo250
        value: 'topo50'
        enum:
          - 'topo50'
          - 'topo250'

      - name: group_size
        description: How many items to pass to each create-cog job
        value: '50'

  templates:
    # Main entrypoint into the workflow
    - name: main
      retryStrategy:
        expression: 'false'
      inputs:
        parameters:
          - name: source
          - name: target
          - name: title
          - name: scale
          - name: group_size
      dag:
        tasks:
          # For each tile matrix specified run the "cogify" template
          - name: get-location
            templateRef:
              name: tpl-get-location
              template: main

          - name: topo-stac-creation
            template: topo-stac-creation
            arguments:
              parameters:
                - name: source
                  value: '{{ inputs.parameters.source }}'
                - name: target
                  value: '{{ tasks.get-location.outputs.parameters.location }}'
                - name: title
                  value: '{{ inputs.parameters.title }}'
                - name: scale
                  value: '{{ inputs.parameters.scale }}'
            depends: get-location

          - name: group
            arguments:
              parameters:
                - name: size
                  value: '{{ inputs.parameters.group_size }}'
                - name: version
                  value: '{{= workflow.parameters.version_argo_tasks }}'
              artifacts:
                - name: input
                  from: '{{ tasks.topo-stac-creation.outputs.artifacts.tiles }}'
            templateRef:
              name: tpl-at-group
              template: main
            depends: topo-stac-creation

          - name: topo-cog-creation
            template: topo-cog-creation
            withParam: '{{ tasks.group.outputs.parameters.output }}'
            arguments:
              parameters:
                - name: grouped_id
                  value: '{{ item }}'
              artifacts:
                - name: grouped
                  from: '{{ tasks.group.outputs.artifacts.output }}'
            depends: group

          - name: topo-stac-validation
            template: topo-stac-validation
            arguments:
              parameters:
                - name: path
                  value: '{{ tasks.get-location.outputs.parameters.location }}'
                - name: scale
                  value: '{{ inputs.parameters.scale }}'
            depends: topo-cog-creation

          - name: create-config
            template: create-config
            arguments:
              parameters:
                - name: path
                  value: '{{ tasks.get-location.outputs.parameters.location }}'
                - name: scale
                  value: '{{ inputs.parameters.scale }}'
            depends: 'topo-stac-validation'

    # List of the topographic tiles from source and import into target bucket
    - name: topo-stac-creation
      inputs:
        parameters:
          - name: source
          - name: target
          - name: title
          - name: scale
      container:
        image: 019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/argo-tasks:{{workflow.parameters.version_argo_tasks}}
        command: [node, /app/index.js]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          - 'bmc'
          - 'topo-stac-creation'
          - '--source={{ inputs.parameters.source }}'
          - '--target={{ inputs.parameters.target }}'
          - '--title={{ inputs.parameters.title }}'
          - '--scale={{ inputs.parameters.scale }}'
      outputs:
        artifacts:
          - name: tiles
            path: /tmp/topo-stac-creation/tiles.json

    - name: topo-cog-creation
      nodeSelector:
        karpenter.sh/capacity-type: 'spot'
      inputs:
        artifacts:
          - name: grouped
            path: /tmp/topo-cog-creation/grouped/
        parameters:
          - name: grouped_id
      container:
        resources:
          requests:
            memory: 30Gi
            cpu: 15000m # AWS gives 2x cpu cores = memory for most instances
            ephemeral-storage: 98Gi # 2 pods per 200GB of storage
        image: 019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/argo-tasks:{{workflow.parameters.version_argo_tasks}}
        command: [node, /app/index.js]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          - 'bmc'
          - 'topo-cog-creation'
          - '--from-file={{= inputs.artifacts.grouped.path }}{{inputs.parameters.grouped_id}}.json'

    - name: topo-stac-validation
      inputs:
        parameters:
          - name: path
      container:
        image: 019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/argo-tasks:{{workflow.parameters.version_argo_tasks}}
        command: [node, /app/index.js]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          - 'bmc'
          - 'topo-stac-validation'
          - '--input={{= inputs.parameters.path }}{{= inputs.parameters.scale }}/' # Why this is not working???
          - '--include-latest'
          
    # Create a basemaps configuration file to view the imagery
    - name: create-config
      inputs:
        parameters:
          - name: path
            description: Location of the imagery to create config for
          - name: scale
      container:
        image: ghcr.io/linz/basemaps/cli:{{ workflow.parameters.version_basemaps_cli }}
        command: [node, /app/node_modules/@basemaps/cogify/dist/index.cjs]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          - 'config'
          - '{{= inputs.parameters.path }}{{= inputs.parameters.scale }}-latest/'
      outputs:
        parameters:
          - name: url
            description: Basemaps URL to view the imagery
            valueFrom:
              path: '/tmp/cogify/config-url'
          - name: config
            description: Location of the config file
            valueFrom:
              path: '/tmp/cogify/config-path'

    - name: exit-handler
      retryStrategy:
        limit: '0' # `tpl-exit-handler` retries itself
      steps:
        - - name: exit
            templateRef:
              name: tpl-exit-handler
              template: main
            arguments:
              parameters:
                - name: workflow_status
                  value: '{{ workflow.status }}'
                - name: workflow_parameters
                  value: '{{ workflow.parameters }}'
