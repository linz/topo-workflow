/* eslint-disable @typescript-eslint/no-explicit-any */
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * AWSNodeTemplate is the Schema for the AWSNodeTemplate API
 *
 * @schema AWSNodeTemplate
 */
export class AwsNodeTemplate extends ApiObject {
  /**
   * Returns the apiVersion and kind for "AWSNodeTemplate"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'karpenter.k8s.aws/v1alpha1',
    kind: 'AWSNodeTemplate',
  };

  /**
   * Renders a Kubernetes manifest for "AWSNodeTemplate".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AwsNodeTemplateProps = {}): any {
    return {
      ...AwsNodeTemplate.GVK,
      ...toJson_AwsNodeTemplateProps(props),
    };
  }

  /**
   * Defines a "AWSNodeTemplate" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: AwsNodeTemplateProps = {}) {
    super(scope, id, {
      ...AwsNodeTemplate.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...AwsNodeTemplate.GVK,
      ...toJson_AwsNodeTemplateProps(resolved),
    };
  }
}

/**
 * AWSNodeTemplate is the Schema for the AWSNodeTemplate API
 *
 * @schema AWSNodeTemplate
 */
export interface AwsNodeTemplateProps {
  /**
   * @schema AWSNodeTemplate#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * AWSNodeTemplateSpec is the top level specification for the AWS Karpenter Provider. This will contain configuration necessary to launch instances in AWS.
   *
   * @schema AWSNodeTemplate#spec
   */
  readonly spec?: AwsNodeTemplateSpec;
}

/**
 * Converts an object of type 'AwsNodeTemplateProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AwsNodeTemplateProps(obj: AwsNodeTemplateProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    metadata: obj.metadata,
    spec: toJson_AwsNodeTemplateSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AWSNodeTemplateSpec is the top level specification for the AWS Karpenter Provider. This will contain configuration necessary to launch instances in AWS.
 *
 * @schema AwsNodeTemplateSpec
 */
export interface AwsNodeTemplateSpec {
  /**
   * AMIFamily is the AMI family that instances use.
   *
   * @schema AwsNodeTemplateSpec#amiFamily
   */
  readonly amiFamily?: string;

  /**
   * AMISelector discovers AMIs to be used by Amazon EC2 tags.
   *
   * @schema AwsNodeTemplateSpec#amiSelector
   */
  readonly amiSelector?: { [key: string]: string };

  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema AwsNodeTemplateSpec#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * BlockDeviceMappings to be applied to provisioned nodes.
   *
   * @schema AwsNodeTemplateSpec#blockDeviceMappings
   */
  readonly blockDeviceMappings?: AwsNodeTemplateSpecBlockDeviceMappings[];

  /**
   * Context is a Reserved field in EC2 APIs https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet.html
   *
   * @schema AwsNodeTemplateSpec#context
   */
  readonly context?: string;

  /**
   * DetailedMonitoring controls if detailed monitoring is enabled for instances that are launched
   *
   * @schema AwsNodeTemplateSpec#detailedMonitoring
   */
  readonly detailedMonitoring?: boolean;

  /**
   * InstanceProfile is the AWS identity that instances use.
   *
   * @schema AwsNodeTemplateSpec#instanceProfile
   */
  readonly instanceProfile?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema AwsNodeTemplateSpec#kind
   */
  readonly kind?: string;

  /**
   * LaunchTemplateName for the node. If not specified, a launch template will be generated. NOTE: This field is for specifying a custom launch template and is exposed in the Spec as `launchTemplate` for backwards compatibility.
   *
   * @schema AwsNodeTemplateSpec#launchTemplate
   */
  readonly launchTemplate?: string;

  /**
   * MetadataOptions for the generated launch template of provisioned nodes.
   * This specifies the exposure of the Instance Metadata Service to provisioned EC2 nodes. For more information, see Instance Metadata and User Data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the Amazon Elastic Compute Cloud User Guide.
   * Refer to recommended, security best practices (https://aws.github.io/aws-eks-best-practices/security/docs/iam/#restrict-access-to-the-instance-profile-assigned-to-the-worker-node) for limiting exposure of Instance Metadata and User Data to pods. If omitted, defaults to httpEndpoint enabled, with httpProtocolIPv6 disabled, with httpPutResponseLimit of 2, and with httpTokens required.
   *
   * @schema AwsNodeTemplateSpec#metadataOptions
   */
  readonly metadataOptions?: AwsNodeTemplateSpecMetadataOptions;

  /**
   * SecurityGroups specify the names of the security groups.
   *
   * @schema AwsNodeTemplateSpec#securityGroupSelector
   */
  readonly securityGroupSelector?: { [key: string]: string };

  /**
   * SubnetSelector discovers subnets by tags. A value of "" is a wildcard.
   *
   * @schema AwsNodeTemplateSpec#subnetSelector
   */
  readonly subnetSelector?: { [key: string]: string };

  /**
   * Tags to be applied on ec2 resources like instances and launch templates.
   *
   * @schema AwsNodeTemplateSpec#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * UserData to be applied to the provisioned nodes. It must be in the appropriate format based on the AMIFamily in use. Karpenter will merge certain fields into this UserData to ensure nodes are being provisioned with the correct configuration.
   *
   * @schema AwsNodeTemplateSpec#userData
   */
  readonly userData?: string;
}

/**
 * Converts an object of type 'AwsNodeTemplateSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AwsNodeTemplateSpec(obj: AwsNodeTemplateSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    amiFamily: obj.amiFamily,
    amiSelector:
      obj.amiSelector === undefined
        ? undefined
        : Object.entries(obj.amiSelector).reduce((r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }), {}),
    apiVersion: obj.apiVersion,
    blockDeviceMappings: obj.blockDeviceMappings?.map((y) => toJson_AwsNodeTemplateSpecBlockDeviceMappings(y)),
    context: obj.context,
    detailedMonitoring: obj.detailedMonitoring,
    instanceProfile: obj.instanceProfile,
    kind: obj.kind,
    launchTemplate: obj.launchTemplate,
    metadataOptions: toJson_AwsNodeTemplateSpecMetadataOptions(obj.metadataOptions),
    securityGroupSelector:
      obj.securityGroupSelector === undefined
        ? undefined
        : Object.entries(obj.securityGroupSelector).reduce(
            (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
            {},
          ),
    subnetSelector:
      obj.subnetSelector === undefined
        ? undefined
        : Object.entries(obj.subnetSelector).reduce((r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }), {}),
    tags:
      obj.tags === undefined
        ? undefined
        : Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }), {}),
    userData: obj.userData,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AwsNodeTemplateSpecBlockDeviceMappings
 */
export interface AwsNodeTemplateSpecBlockDeviceMappings {
  /**
   * The device name (for example, /dev/sdh or xvdh).
   *
   * @schema AwsNodeTemplateSpecBlockDeviceMappings#deviceName
   */
  readonly deviceName?: string;

  /**
   * EBS contains parameters used to automatically set up EBS volumes when an instance is launched.
   *
   * @schema AwsNodeTemplateSpecBlockDeviceMappings#ebs
   */
  readonly ebs?: AwsNodeTemplateSpecBlockDeviceMappingsEbs;
}

/**
 * Converts an object of type 'AwsNodeTemplateSpecBlockDeviceMappings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AwsNodeTemplateSpecBlockDeviceMappings(
  obj: AwsNodeTemplateSpecBlockDeviceMappings | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    deviceName: obj.deviceName,
    ebs: toJson_AwsNodeTemplateSpecBlockDeviceMappingsEbs(obj.ebs),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * MetadataOptions for the generated launch template of provisioned nodes.
 * This specifies the exposure of the Instance Metadata Service to provisioned EC2 nodes. For more information, see Instance Metadata and User Data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the Amazon Elastic Compute Cloud User Guide.
 * Refer to recommended, security best practices (https://aws.github.io/aws-eks-best-practices/security/docs/iam/#restrict-access-to-the-instance-profile-assigned-to-the-worker-node) for limiting exposure of Instance Metadata and User Data to pods. If omitted, defaults to httpEndpoint enabled, with httpProtocolIPv6 disabled, with httpPutResponseLimit of 2, and with httpTokens required.
 *
 * @schema AwsNodeTemplateSpecMetadataOptions
 */
export interface AwsNodeTemplateSpecMetadataOptions {
  /**
   * HTTPEndpoint enables or disables the HTTP metadata endpoint on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is "enabled".
   * If you specify a value of "disabled", instance metadata will not be accessible on the node.
   *
   * @schema AwsNodeTemplateSpecMetadataOptions#httpEndpoint
   */
  readonly httpEndpoint?: string;

  /**
   * HTTPProtocolIPv6 enables or disables the IPv6 endpoint for the instance metadata service on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is "disabled".
   *
   * @schema AwsNodeTemplateSpecMetadataOptions#httpProtocolIPv6
   */
  readonly httpProtocolIPv6?: string;

  /**
   * HTTPPutResponseHopLimit is the desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Possible values are integers from 1 to 64. If metadata options is non-nil, but this parameter is not specified, the default value is 1.
   *
   * @schema AwsNodeTemplateSpecMetadataOptions#httpPutResponseHopLimit
   */
  readonly httpPutResponseHopLimit?: number;

  /**
   * HTTPTokens determines the state of token usage for instance metadata requests. If metadata options is non-nil, but this parameter is not specified, the default state is "optional".
   * If the state is optional, one can choose to retrieve instance metadata with or without a signed token header on the request. If one retrieves the IAM role credentials without a token, the version 1.0 role credentials are returned. If one retrieves the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned.
   * If the state is "required", one must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
   *
   * @schema AwsNodeTemplateSpecMetadataOptions#httpTokens
   */
  readonly httpTokens?: string;
}

/**
 * Converts an object of type 'AwsNodeTemplateSpecMetadataOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AwsNodeTemplateSpecMetadataOptions(
  obj: AwsNodeTemplateSpecMetadataOptions | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    httpEndpoint: obj.httpEndpoint,
    httpProtocolIPv6: obj.httpProtocolIPv6,
    httpPutResponseHopLimit: obj.httpPutResponseHopLimit,
    httpTokens: obj.httpTokens,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EBS contains parameters used to automatically set up EBS volumes when an instance is launched.
 *
 * @schema AwsNodeTemplateSpecBlockDeviceMappingsEbs
 */
export interface AwsNodeTemplateSpecBlockDeviceMappingsEbs {
  /**
   * DeleteOnTermination indicates whether the EBS volume is deleted on instance termination.
   *
   * @schema AwsNodeTemplateSpecBlockDeviceMappingsEbs#deleteOnTermination
   */
  readonly deleteOnTermination?: boolean;

  /**
   * Encrypted indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.
   *
   * @schema AwsNodeTemplateSpecBlockDeviceMappingsEbs#encrypted
   */
  readonly encrypted?: boolean;

  /**
   * IOPS is the number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
   * The following are the supported values for each volume type:
   * * gp3: 3,000-16,000 IOPS
   * * io1: 100-64,000 IOPS
   * * io2: 100-64,000 IOPS
   * For io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built on the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). Other instance families guarantee performance up to 32,000 IOPS.
   * This parameter is supported for io1, io2, and gp3 volumes only. This parameter is not supported for gp2, st1, sc1, or standard volumes.
   *
   * @schema AwsNodeTemplateSpecBlockDeviceMappingsEbs#iops
   */
  readonly iops?: number;

  /**
   * KMSKeyID (ARN) of the symmetric Key Management Service (KMS) CMK used for encryption.
   *
   * @schema AwsNodeTemplateSpecBlockDeviceMappingsEbs#kmsKeyID
   */
  readonly kmsKeyId?: string;

  /**
   * SnapshotID is the ID of an EBS snapshot
   *
   * @schema AwsNodeTemplateSpecBlockDeviceMappingsEbs#snapshotID
   */
  readonly snapshotId?: string;

  /**
   * Throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s. Valid Range: Minimum value of 125. Maximum value of 1000.
   *
   * @schema AwsNodeTemplateSpecBlockDeviceMappingsEbs#throughput
   */
  readonly throughput?: number;

  /**
   * VolumeSize in GiBs. You must specify either a snapshot ID or a volume size. The following are the supported volumes sizes for each volume type:
   * * gp2 and gp3: 1-16,384
   * * io1 and io2: 4-16,384
   * * st1 and sc1: 125-16,384
   * * standard: 1-1,024
   *
   * @schema AwsNodeTemplateSpecBlockDeviceMappingsEbs#volumeSize
   */
  readonly volumeSize?: string; // FIXME this should be a string not AwsNodeTemplateSpecBlockDeviceMappingsEbs

  /**
   * VolumeType of the block device. For more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the Amazon Elastic Compute Cloud User Guide.
   *
   * @schema AwsNodeTemplateSpecBlockDeviceMappingsEbs#volumeType
   */
  readonly volumeType?: string;
}

/**
 * Converts an object of type 'AwsNodeTemplateSpecBlockDeviceMappingsEbs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AwsNodeTemplateSpecBlockDeviceMappingsEbs(
  obj: AwsNodeTemplateSpecBlockDeviceMappingsEbs | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    deleteOnTermination: obj.deleteOnTermination,
    encrypted: obj.encrypted,
    iops: obj.iops,
    kmsKeyID: obj.kmsKeyId,
    snapshotID: obj.snapshotId,
    throughput: obj.throughput,
    volumeSize: obj.volumeSize?.value,
    volumeType: obj.volumeType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VolumeSize in GiBs. You must specify either a snapshot ID or a volume size. The following are the supported volumes sizes for each volume type:
 * * gp2 and gp3: 1-16,384
 * * io1 and io2: 4-16,384
 * * st1 and sc1: 125-16,384
 * * standard: 1-1,024
 *
 * @schema AwsNodeTemplateSpecBlockDeviceMappingsEbsVolumeSize
 */
export class AwsNodeTemplateSpecBlockDeviceMappingsEbsVolumeSize {
  public static fromNumber(value: number): AwsNodeTemplateSpecBlockDeviceMappingsEbsVolumeSize {
    return new AwsNodeTemplateSpecBlockDeviceMappingsEbsVolumeSize(value);
  }
  public static fromString(value: string): AwsNodeTemplateSpecBlockDeviceMappingsEbsVolumeSize {
    return new AwsNodeTemplateSpecBlockDeviceMappingsEbsVolumeSize(value);
  }
  private constructor(public readonly value: number | string) {}
}
